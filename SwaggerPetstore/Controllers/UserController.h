//
//  UserController.h
//  SwaggerPetstore
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
//
#import <Foundation/Foundation.h>
#import "Configuration.h"
#import "APIHelper.h"
#import "APIError.h"
#import "BaseController.h"
#import "UnirestClient.h"
#import "HttpContext.h"
#import "NSDate+extension.h"
#import "User.h"

@interface UserController : BaseController

/**
* Completion block definition for asynchronous call to createUsersWithArrayInput */
typedef void (^CompletedPostCreateUsersWithArrayInput)(BOOL success, HttpContext* context, NSError* error);

/**
* Creates list of users with given input array
* @param    body    Required parameter: List of user object
*/
- (void) createUsersWithArrayInputAsyncWithBody:(NSArray<User> *) body
                completionBlock:(CompletedPostCreateUsersWithArrayInput) onCompleted;

/**
* Completion block definition for asynchronous call to createUsersWithListInput */
typedef void (^CompletedPostCreateUsersWithListInput)(BOOL success, HttpContext* context, NSError* error);

/**
* Creates list of users with given input array
* @param    body    Required parameter: List of user object
*/
- (void) createUsersWithListInputAsyncWithBody:(NSArray<User> *) body
                completionBlock:(CompletedPostCreateUsersWithListInput) onCompleted;

/**
* Completion block definition for asynchronous call to createUser */
typedef void (^CompletedPostCreateUser)(BOOL success, HttpContext* context, NSError* error);

/**
* Create user
* @param    body    Required parameter: Created user object
*/
- (void) createUserAsyncWithBody:(User*) body
                completionBlock:(CompletedPostCreateUser) onCompleted;

/**
* Completion block definition for asynchronous call to loginUser */
typedef void (^CompletedGetLoginUser)(BOOL success, HttpContext* context, NSString* response, NSError* error);

/**
* Logs user into the system
* @param    username    Required parameter: The user name for login
* @param    password    Required parameter: The password for login in clear text
*/
- (void) getLoginUserAsyncWithUsername:(NSString*) username
                password:(NSString*) password
                completionBlock:(CompletedGetLoginUser) onCompleted;

/**
* Completion block definition for asynchronous call to logoutUser */
typedef void (^CompletedGetLogoutUser)(BOOL success, HttpContext* context, NSError* error);

/**
* Logs out current logged in user session
*/
- (void) getLogoutUserWithCompletionBlock:(CompletedGetLogoutUser) onCompleted;

/**
* Completion block definition for asynchronous call to getUserByName */
typedef void (^CompletedGetUserByName)(BOOL success, HttpContext* context, User* response, NSError* error);

/**
* Get user by user name
* @param    username    Required parameter: The name that needs to be fetched. Use user1 for testing.
*/
- (void) getUserByNameAsyncWithUsername:(NSString*) username
                completionBlock:(CompletedGetUserByName) onCompleted;

/**
* Completion block definition for asynchronous call to updateUser */
typedef void (^CompletedPutUpdateUser)(BOOL success, HttpContext* context, NSError* error);

/**
* Updated user
* @param    username    Required parameter: name that need to be updated
* @param    body    Required parameter: Updated user object
*/
- (void) updateUserAsyncWithUsername:(NSString*) username
                body:(User*) body
                completionBlock:(CompletedPutUpdateUser) onCompleted;

/**
* Completion block definition for asynchronous call to deleteUser */
typedef void (^CompletedDeleteUser)(BOOL success, HttpContext* context, NSError* error);

/**
* Delete user
* @param    username    Required parameter: The name that needs to be deleted
*/
- (void) deleteUserAsyncWithUsername:(NSString*) username
                completionBlock:(CompletedDeleteUser) onCompleted;

@end